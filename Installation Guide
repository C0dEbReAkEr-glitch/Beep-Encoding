Beep Encoding System - Command Line Tool
# Installation Guide (Command-Line Tool)

This guide explains how to set up and use the command-line tool `beep_encoder.py` from the Beep Encoding Project.

## Prerequisites

- **Python 3.7 or higher** must be installed on your system.
- **pip** (Python package manager) should be available.
- (Optional) It is recommended to use a virtual environment.

## Installation Steps

1. **Clone the Repository**

   Open your terminal or command prompt and run:
   ```bash
   git clone https://github.com/C0dEbReAkEr-glitch/Beep-Encoding.git
   cd "Beep Encoding"
   ```

2. **(Optional) Create and Activate a Virtual Environment**

   On Windows:
   ```bash
   python -m venv venv
   .\venv\Scripts\activate
   ```
   On macOS/Linux:
   ```bash
   python3 -m venv venv
   source venv/bin/activate
   ```

3. **Install Required Python Packages**

   Run:
   ```bash
   pip install -r requirements.txt
   ```
   If `requirements.txt` is not present, install the main dependencies manually:
   ```bash
   pip install numpy scipy
   ```

4. **Usage**

   To use the command-line tool, run:
   ```bash
   python beep_encoder.py --help
   ```
   This will display available options and usage instructions for encoding and decoding messages.

---

**Note:**
- This installation guide is specifically for the command-line tool (`beep_encoder.py`).
- For the Streamlit-based tool (`ml.py`), refer to the main README for additional setup instructions.
Decode from Live Recording
bash# Record for 10 seconds and decode
python beep_encoder.py decode -r 10 -o live_decode.json

# Record for 5 seconds and decode morse
python beep_encoder.py decode -r 5 -o morse_live.json
Signal Analysis
Analyze Audio File
bash# Detailed analysis of audio file
python beep_encoder.py analyze -i mystery_signal.wav -o analysis_report.json

# Analyze recorded audio
python beep_encoder.py analyze -r 8 -o live_analysis.json
Command Line Options
Global Options

-s, --sample-rate: Sample rate in Hz (default: 44100)
-h, --help: Show help message

Encoding Options

-t, --type: Encoding type (morse, dtmf, fsk, ask, psk, manchester)
-m, --message: Message to encode
-f, --frequency: Base frequency in Hz (default: 800)
-d, --duration: Bit/symbol duration in seconds (default: 0.1)
-a, --amplitude: Signal amplitude 0.0-1.0 (default: 0.3)
-o, --output: Output audio file (.wav)
-p, --play: Play generated audio

Decoding Options

-i, --input: Input audio file (.wav)
-r, --record: Record duration in seconds
-d, --duration: Expected bit duration for digital modes
-o, --output: Output results file (.json)

Analysis Options

-i, --input: Input audio file (.wav)
-r, --record: Record duration in seconds
-o, --output: Output analysis file (.json)

Output Files
Audio Files (.wav)

Generated encoded signals
16-bit mono WAV format
Configurable sample rate

Results Files (.json)
Contains:

Detected encoding type
Decoded message
Confidence score
Signal analysis data
Frequency information
Timing analysis

Info Files (*_info.json)
Automatically generated with encoding operations:

Encoding parameters used
Original message
Signal characteristics
Timestamp

Examples of Complete Workflows
1. Create and Verify Morse Code
bash# Encode message
python beep_encoder.py encode -t morse -m "HELLO" -o hello_morse.wav -p

# Analyze the generated signal
python beep_encoder.py analyze -i hello_morse.wav -o morse_analysis.json

# Decode it back
python beep_encoder.py decode -i hello_morse.wav -o morse_decode.json
2. Test DTMF System
bash# Encode phone number
python beep_encoder.py encode -t dtmf -m "5551234" -d 0.2 -o phone_number.wav

# Verify encoding
python beep_encoder.py decode -i phone_number.wav -o phone_decode.json
3. Live Recording and Analysis
bash# Record unknown signal for 10 seconds
python beep_encoder.py analyze -r 10 -o unknown_signal.json

# If analysis shows it's morse code, decode it
python beep_encoder.py decode -r 10 -o morse_message.json
4. Batch Processing
bash# Create multiple test signals
python beep_encoder.py encode -t morse -m "TEST1" -o test1_morse.wav
python beep_encoder.py encode -t fsk -m "TEST2" -o test2_fsk.wav
python beep_encoder.py encode -t ask -m "TEST3" -o test3_ask.wav

# Analyze all signals
python beep_encoder.py analyze -i test1_morse.wav -o analysis1.json
python beep_encoder.py analyze -i test2_fsk.wav -o analysis2.json
python beep_encoder.py analyze -i test3_ask.wav -o analysis3.json
Troubleshooting
Common Issues

Missing Dependencies
bashpip install --upgrade numpy scipy sounddevice

Audio Device Issues

Check available audio devices: python -c "import sounddevice as sd; print(sd.query_devices())"
Set default device: export SDL_AUDIODRIVER=pulse (Linux)


Permission Issues
bashchmod +x beep_encoder.py

Sample Rate Issues

Use -s 22050 for lower quality but smaller files
Use -s 44100 (default) for CD quality



Performance Tips

Use shorter durations (-d 0.05) for faster encoding
Lower sample rates (-s 22050) for smaller files
Use lower amplitudes (-a 0.2) to prevent clipping

Advanced Features
Custom Frequency Analysis
The tool automatically detects:

DTMF frequency pairs (697-1633 Hz)
FSK frequency ratios (1.2-2.0x)
Morse code timing patterns
Amplitude modulation patterns
Phase shift patterns

Confidence Scoring
Decoding results include confidence scores:

80-100%: High confidence, likely correct
60-79%: Medium confidence, probably correct
40-59%: Low confidence, may have errors
0-39%: Very low confidence, likely incorrect

File Formats

Input: WAV files (mono or stereo, various sample rates)
Output: 16-bit mono WAV files, JSON results
Compatibility: Standard WAV format, playable in any audio player